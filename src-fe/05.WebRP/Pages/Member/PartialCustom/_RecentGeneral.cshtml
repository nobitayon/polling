@using Delta.Polling.Both.Member.Polls.Queries.GetRecentGeneral;
@using Delta.Polling.Base.Polls.Enums;

@{
    var data = ViewData["Data"] as IEnumerable<PollItem>;
    var error = ViewData["Error"] as string;
}

@if (error != null)
{
    <div>Error: @error</div>
}
else
{
    <div class="container my-4">
        <div id="cardList" class="card-list">
            @if (data != null)
            {
                foreach (var poll in data)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">@poll.Title</h5>
                            <p class="card-text">@poll.Question</p>
                            @if(poll.Modified!=null)
                            {
                                var modifiedDate = poll.Modified.Value;
                                <p class="card-text">Last Modified: @modifiedDate.ToString("MMM dd, yyyy HH:mm")</p>
                            }

                            <p class="card-text">Created: @poll.Created.ToString("MMM dd, yyyy HH:mm")</p>
                            <a class="btn btn-primary" asp-page="/Member/Polls/Details" asp-route-pollId="@poll.Id">View Poll</a>
                            <span class="close-btn" data-id="${poll.id}">&times;</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div>Nothing to show</div>
            }
        </div>
        <div id="loading" class="text-center my-4" style="display: none;">Loading more...</div>
    </div>
}

<script>
    let currentPage = 6;
    const size = 1;
    let cardList = $('#cardList');

    console.log(cardList);

    function handleCardClose() {
        cardList.on('click', '.close-btn', function () {
            $(this).closest('.card').remove();
            fetchPolls();
        });
    }

    function fetchPolls() {
        fetch(`?handler=JustOne&p=${currentPage}&s=${size}&so=2&sf=Modified&MeAlreadyVote=false&kf=Status&k=Ongoing`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseJson => {

                if (responseJson.success) {
                    cardList.append(responseJson.data);
                    currentPage += 1;
                }
            })
            .catch(error => {
                console.error('Error fetching polls:', error);
            });
    }
    handleCardClose();
</script>

<style>
    .card-list {
        max-height: 500px;
        overflow-y: auto;
        position: relative;
    }

    .card {
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
    }
</style>
