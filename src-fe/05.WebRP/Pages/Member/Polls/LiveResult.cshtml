@page "{PollId}"
@using Delta.Polling.FrontEnd.Services.CurrentUser;
@inject ICurrentUserService currentUserService;
@model Delta.Polling.WebRP.Pages.Member.Polls.LiveResultModel

@await Component.InvokeAsync("ErrorViewer", Model.Problem)
@{
    ViewData["Title"] = "Live Result";
    ViewBag.CurrentMenu = MenuFor.MemberPollsIndex;
}

@if (Model.Poll.CreatedBy == currentUserService.Username)
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a class="text-decoration-none"
                   asp-page="/Index">
                    Home
                </a>
            </li>

            <li class="breadcrumb-item">
                <a class="text-decoration-none"
                   asp-page="/Member/Polls/Index">
                    Polls
                </a>
            </li>

            <li class="breadcrumb-item">
                <a class="text-decoration-none"
                   asp-page="/Member/Polls/Details"
                   asp-route-pollId="@Model.PollId">
                    @Model.Poll.Title
                </a>
            </li>

            <li class="breadcrumb-item active"
                aria-current="page">
                @ViewData["Title"]
            </li>
        </ol>
    </nav>

    <div class="container mt-5">
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-primary">
                    <div class="card-header bg-primary text-white">
                        <h3 class="card-title mb-0">Live Result</h3>
                    </div>
                    <div class="card-body">
                        <!-- Chart Container -->
                        <div class="text-center">
                            <div style="position: relative; width: 100%; height: 0; padding-bottom: 50%;">
                                <canvas id="myChart" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger" role="alert">
        <h5 class="alert-heading mb-4">
            Error
        </h5>
        <div class="accordion"
             id="accordionExample">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button"
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#collapseOne"
                            aria-expanded="true"
                            aria-controls="collapseOne">
                        Error Details
                    </button>
                </h2>
                <div id="collapseOne"
                     class="accordion-collapse collapse"
                     data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <p class="p-0 m-0" style="white-space: pre-line">
                            You are not owner of poll
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}





<script>
    let accessToken = '';
    let connection;
    @* let ctx = document.getElementById('myChart').getContext('2d'); *@
        let ctx;
    let myChart;

    async function start() {
        try {
            await connection.start();
            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    fetch(`?handler=FirstTime`)
        .then((response) => {
            return response.json();
        })
        .then((responseJson) => {
            if (responseJson.success) {
                let data = [];
                const labels = [];
                console.log(responseJson.data);
                console.log("ho");
                responseJson.data.forEach((el, index) => {
                    data.push(el.numVote);
                    labels.push(el.description);
                });
                console.log(labels, data);
                updateChart(labels, data);
            }
        })
        .catch((error) => {
            console.log(error);
        })

    fetch(`?handler=AccessToken`)
        .then((response) => {
            return response.json();
        })
        .then((responseJson) => {

            if (responseJson.isValid) {
                accessToken = responseJson.accessToken;
                console.log(`Hello ${responseJson.apiBaseUri}poll-hub`);
                console.log(accessToken);
                connection = new signalR.HubConnectionBuilder()
                    .withUrl(`${responseJson.apiBaseUri}poll-hub`, {
                        accessTokenFactory: () => `${accessToken}`
                    })
                    .build();

                connection.on("ReceiveMessage", (users, messages) => {
                    console.log(users, messages);
                });

                connection.on("SendVote", (pollId, currentVote) => {
                    console.log(pollId);
                    console.log("ba");
                    console.log(currentVote);

                    if (responseJson.pollId == pollId) {
                        let jsonCurrentVote = JSON.parse(currentVote);

                        let chartContainer = document.getElementById('myChart');
                        let data = [];
                        const labels = [];

                        jsonCurrentVote.forEach((el, index) => {
                            data.push(el.NumVote);
                            labels.push(el.Description);
                        });

                        console.log("aman kah 1");
                        // initChart(labels, data);
                        updateChart(labels, data);
                        console.log("aman kah 2");
                    }
                });

                connection.onclose(error => {
                    console.warn('SignalR connection closed:', error);
                    setTimeout(start, 5000);
                });

                start();
            }
        })
        .catch((error) => {
            console.log(error);
        });

    function updateChart(labels, data) {
        if (!myChart) {
            initChart(labels, data);
        } else {
            // Update existing chart
            myChart.data.labels = labels;
            myChart.data.datasets[0].data = data;
            myChart.update();
        }
    }

    function initChart(labels, data) {
        ctx = document.getElementById('myChart').getContext('2d');
        const desiredTicks = 5;

        let maxData = Math.max(...data);
        let minData = Math.min(...data);
        let rangeData = maxData - minData;
        let stepSize;
        if (rangeData > 0) {
            stepSize = Math.ceil(rangeData / (desiredTicks - 1));
        }
        else {
            stepSize = maxData;
        }

        console.log("Hasil di sini");

        myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: "Hasil Polling",
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        data: data
                    }
                ]
            },
            options: {
                responsive: true,
                barThickness: 55,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: maxData + 2,
                        ticks: {
                            stepSize: stepSize
                        }
                    }
                }
            }
        });
        console.log("Hasil di sini oi");
    }

</script>
