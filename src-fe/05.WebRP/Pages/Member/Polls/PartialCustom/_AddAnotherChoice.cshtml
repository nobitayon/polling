@using Delta.Polling.FrontEnd.Logics.Member.Choices.Commands.AddAnotherChoiceOngoingPoll;
@model AddAnotherChoiceOngoingPollCommand;

<form id="add-another-choice"
      method="post"
      asp-page="member/polls/details"
      asp-page-handler="AddAnotherChoice"
      onsubmit="handleFormSubmit(event);">
    <div class="mb-1 row">
        <input type="hidden" asp-for="PollId" name="PollId" />

        <label class="col-md-3 col-form-label">Title</label>
        <div class="col-md-9">
            <input type="text" autocomplete="off" asp-for="Description" name="Description" class="form-control" />
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>
    </div>

    <div class="mb-1 row">
        <div class="col-md-3">
        </div>
    </div>

    <div class="mb-1 justify-content-between">
        <button type="button" class="btn btn-secondary close-button" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary save-button">Save</button>
    </div>

</form>


<script type="text/javascript" language=javascript>

    $.validator.unobtrusive.parse(document);

    async function handleFormSubmit(event) {

        event.preventDefault();
        const form = event.target;

        const formData = new FormData(form);

        try {
            const response = await fetch("?handler=AddAnotherChoice", {
                method: "POST",
                body: formData,
            });

            console.log(response);
            const jsonData = await response.json()

            if (jsonData.isValid) {
                $('#form-modal').modal('hide');
            }
        } catch (e) {
            console.error(e);
        }

        return false;
    }
</script>
