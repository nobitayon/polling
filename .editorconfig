root = true

# Core Rules
# All files
[*]
indent_style = space
end_of_line = crlf
insert_final_newline = true
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
indent_size = 4

# Project files
[*.csproj]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# C# files
[*.cs]

# Severity
dotnet_analyzer_diagnostic.category-Style.severity = error
dotnet_analyzer_diagnostic.category-Naming.severity = error


# Suppressions
## CA1016: Mark assemblies with AssemblyVersionAttribute
dotnet_diagnostic.CA1016.severity = none

## CA1716 Jangan pakai Shared
dotnet_diagnostic.CA1716.severity = none

## CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
dotnet_diagnostic.CS1591.severity = none

# Styling
## Style - Applied during refactoring
### Unnumbered: Operator placement when wrapping lines of code
dotnet_style_operator_placement_when_wrapping = beginning_of_line

## Style - Experimental
### IDE2000: Allow multiple blank lines
dotnet_style_allow_multiple_blank_lines_experimental = false:error

### IDE2001: Allow embedded statements on same line
csharp_style_allow_embedded_statements_on_same_line_experimental = false:error

### IDE2002: Allow blank lines between consecutive braces
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:error

### IDE2003: Allow statement immediately after block
dotnet_style_allow_statement_immediately_after_block_experimental = false:error

## IDE2004: Allow blank line after colon in constructor initializer
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false:error

## Style - Language rules ('this.' and 'Me.' qualifiers)
### IDE0003: Remove this or Me qualification
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

## Style - Language rules (language keywords instead of framework type names)
### IDE0049: Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

## Style - Language rules (modifier preferences)
### IDE0040: Add accessibility modifiers
dotnet_style_require_accessibility_modifiers = always:error

### IDE0036: Order modifiers
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:error

## Style - Language rules (field preferences)
### IDE0044: Add readonly modifier
dotnet_style_readonly_field = true:error

## Style - Language rules (parentheses preferences)
### IDE0048: Add parentheses for clarity
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_operators = always_for_clarity:error

## Style - Language rules (expression-level preferences)
### IDE0017: Use object initializers
dotnet_style_object_initializer = true:error

### IDE0130: Namespace does not match folder structure
dotnet_style_namespace_match_folder = true:error

### IDE0058: Remove unnecessary expression value
csharp_style_unused_value_expression_statement_preference = discard_variable:error

### IDE0028: Use collection initializers
dotnet_style_collection_initializer = true:error
dotnet_style_prefer_collection_expression = true:suggestion

### IDE0029: Null check can be simplified (ternary conditional check)
### IDE0030: Null check can be simplified (nullable ternary conditional check)
### IDE0270: Null check can be simplified (if null check)
dotnet_style_coalesce_expression = true:error

### IDE0031: Use null propagation
dotnet_style_null_propagation = true:error

### IDE0032: Use auto-implemented property
dotnet_style_prefer_auto_properties = true:error

### IDE0033: Use explicitly provided tuple name
dotnet_style_explicit_tuple_names = true:error

### IDE0037: Use inferred member name
dotnet_style_prefer_inferred_tuple_names = false:error
dotnet_style_prefer_inferred_anonymous_type_member_names = false:error

### IDE0041: Use 'is null' check
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error

### IDE0045: Use conditional expression for assignment
dotnet_style_prefer_conditional_expression_over_assignment = false:error

### IDE0046: Use conditional expression for return
dotnet_style_prefer_conditional_expression_over_return = false:error

### IDE0054: Use compound assignment and IDE0074: Use coalesce compound assignment
dotnet_style_prefer_compound_assignment = true:error

### IDE0071: Simplify interpolation
dotnet_style_prefer_simplified_interpolation = true:error

### IDE0075: Simplify conditional expression
dotnet_style_prefer_simplified_boolean_expressions = true:error

## Style - Unnecessary code rules (parameter preferences)
### IDE0060: Remove unused parameter
dotnet_code_quality_unused_parameters = all:error

## Style - Unnecessary code rules (suppression preferences)
### IDE0079: Remove unnecessary suppression
dotnet_remove_unnecessary_suppression_exclusions = none:error

## Style - Language rules (code-block preferences)
### IDE0161: Use file-scoped namespace
csharp_style_namespace_declarations = file_scoped:error

## Style - Language rules ('var' preferences) ##
### IDE0007: Use var instead of explicit type
csharp_style_var_for_built_in_types = true:error
csharp_style_var_when_type_is_apparent = true:error
csharp_style_var_elsewhere = true:error

## Style - Language rules (expression-bodied members)
### IDE0021: Use expression body for constructors
csharp_style_expression_bodied_constructors = false:error

### IDE0022: Use expression body for methods
csharp_style_expression_bodied_methods = false:error

### IDE0023: Use expression body for conversion operators
### IDE0024: Use expression body for operators
csharp_style_expression_bodied_operators = when_on_single_line:error

### IDE0025: Use expression body for properties
csharp_style_expression_bodied_properties = when_on_single_line:error

### IDE0026: Use expression body for indexers
csharp_style_expression_bodied_indexers = when_on_single_line:error

### IDE0027: Use expression body for accessors
csharp_style_expression_bodied_accessors = when_on_single_line:error

### IDE0053: Use expression body for lambdas
csharp_style_expression_bodied_lambdas = when_on_single_line:suggestion
dotnet_diagnostic.IDE0053.severity = suggestion

### IDE0061: Use expression body for local functions
csharp_style_expression_bodied_local_functions = false:error

##### TODO: Continue To Revise Here #####

## C# Style - Pattern matching preferences ##
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_prefer_switch_expression = true:error
csharp_style_prefer_pattern_matching = true:error
csharp_style_prefer_not_pattern = true:error

## C# Style - Expression-level preferences ##
csharp_style_inlined_variable_declaration = true:error
csharp_prefer_simple_default_expression = true:error
csharp_style_pattern_local_over_anonymous_function = true:error
csharp_style_deconstructed_variable_declaration = true:error
csharp_style_prefer_index_operator = true:error
csharp_style_prefer_range_operator = true:error
csharp_style_implicit_object_creation_when_type_is_apparent = true:error

## C# Style - Null-checking preferences ##
csharp_style_throw_expression = true:error
csharp_style_conditional_delegate_call = true:error

## C# Style - Code block preferences ##
csharp_prefer_braces = true:error
csharp_prefer_simple_using_statement = true:error

## C# Style - Modifier preferences ##
csharp_using_directive_placement = outside_namespace:error
csharp_prefer_static_local_function = true:error

#### Formatting ####

### .NET Formatting Rules ###

## .NET Formatting - Organize Usings
# Still not causing error if we violate the rules
dotnet_sort_system_directives_first = true

dotnet_separate_import_directive_groups = false

### C# Formatting Rules ###

## C# Formatting - Newline ##
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

## C# Formatting - Indentation ##
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

## C# Formatting - Spacing ##
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = 
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

## C# Formatting - Wrap ##
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

#### Naming ####

### Roslyn Naming Rules ###

## Non-private static fields are PascalCase ##
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

## Non-private readonly fields are PascalCase ##
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

## Constants are PascalCase ##
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

## Instance fields are camelCase ##
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

## Interfaces are PascalCase ##
dotnet_naming_rule.interfaces_should_be_pascal_case.severity = error
dotnet_naming_rule.interfaces_should_be_pascal_case.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_pascal_case.style = interface_style

dotnet_naming_symbols.interfaces.applicable_kinds = interface

dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I

## Locals and parameters are camelCase ##
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

## Local functions are PascalCase ##
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

## By default, name items with PascalCase ##
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_primary_constructors = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent
csharp_style_prefer_extended_property_pattern = true:suggestion
